% nix, package, flake

# Install a specific package from a flake
nix profile install <flake_ref>#<package>

# Run a specific package from a flake without installing
nix run <flake_ref>#<package>

# Build a specific package from a flake
nix build <flake_ref>#<package>

# Show all outputs of a flake
nix flake show <flake_ref>

# Update flake lock file
nix flake update <flake_ref>

# Update a specific input in flake lock file
nix flake lock --update-input <input> <flake_ref>

# Create a development shell from a flake
nix develop <flake_ref>

# Search for a package in nixpkgs
nix search nixpkgs <search_term>

# Get information about a package
nix-env -qa --description <package>

% nix, derivation, shell

# Run a command in a shell with packages
nix-shell -p <packages> --run "<command>"

# Create a temporary shell with packages
nix shell nixpkgs#<package1> nixpkgs#<package2>

% nix, darwin, system

# Rebuild and switch to a new Darwin configuration from a flake
darwin-rebuild switch --flake <flake_ref>

# Rebuild and switch to a new Darwin configuration from the current directory flake
darwin-rebuild switch --flake .#

# Build but don't activate a Darwin configuration from a flake
darwin-rebuild build --flake <flake_ref>

% nix, home-manager

# Rebuild and switch to a new Home Manager configuration from the current directory flake
home-manager switch --flake .#

# List generations of Home Manager
home-manager generations

% nix, flake, template

# Create a new flake from a template
nix flake init -t <template_flake_ref>

# Create a new flake from a specific template
nix flake init -t github:NixOS/templates#<template>

# List available templates from NixOS templates
nix flake show github:NixOS/templates

% nix, garbage, collection

# Collect garbage (delete unused store paths)
nix-collect-garbage

# Collect garbage and delete old generations
nix-collect-garbage -d

# List all generations
nix profile history

# Delete specific generations
nix profile wipe-history --older-than <days>d

# Optimize the Nix store
nix-store --optimize

% nix, debug, info

# Show the derivation for a package
nix show-derivation <flake_ref>

# Show the build log for a package
nix log <flake_ref>

# Show the dependencies of a package
nix-store -q --references <path>

# Show the reverse dependencies of a package
nix-store -q --referrers <path>

# Show the closure size of a package
nix path-info -S <flake_ref>

# Show the tree of dependencies of a package
nix-store -q --tree <path>